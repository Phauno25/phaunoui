{"id":"../../../node_modules/@phaunoui/reakt/lib/molecules/Select/Select.js","dependencies":[{"name":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\@phaunoui\\reakt\\lib\\molecules\\Select\\Select.js.map","includedInParent":true,"mtime":1696296490308},{"name":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\playground\\react\\package.json","includedInParent":true,"mtime":1695844297889},{"name":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\@phaunoui\\reakt\\package.json","includedInParent":true,"mtime":1695870866316},{"name":"react","loc":{"line":1,"column":62,"index":62},"parent":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\@phaunoui\\reakt\\lib\\molecules\\Select\\Select.js","resolved":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\react\\index.js"},{"name":"../../atoms/Text/Text.js","loc":{"line":2,"column":17,"index":88},"parent":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\@phaunoui\\reakt\\lib\\molecules\\Select\\Select.js","resolved":"D:\\Pablo\\Programacion\\React\\Proyectos\\phauno-ui\\node_modules\\@phaunoui\\reakt\\lib\\atoms\\Text\\Text.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _Text = _interopRequireDefault(require(\"../../atoms/Text/Text.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst Select = ({\n  label,\n  options,\n  onOptionSelected: handler,\n  renderOptions\n}) => {\n  const [isOpen, setIsOpen] = (0, _react.useState)(false);\n  const labelRef = (0, _react.useRef)(null);\n  const [overlayTop, setOverlayTop] = (0, _react.useState)(0);\n  const [optionRefs, setOptionRefs] = (0, _react.useState)([]);\n  const [selectedIndex, setSelectedIndex] = (0, _react.useState)(-1);\n  const [highlightedIndex, setHighlightedIndex] = (0, _react.useState)(0);\n  const onLabelClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const onOptionSelected = (option, optionIndex) => {\n    if (handler) {\n      handler(option, optionIndex);\n    }\n    if (optionIndex === selectedIndex) {\n      setSelectedIndex(-1);\n    } else {\n      setSelectedIndex(optionIndex);\n      console.log(optionIndex);\n    }\n    setIsOpen(!isOpen);\n  };\n  const onButtonKeyDown = ev => {\n    ev.preventDefault();\n    if ([\"enter\", \" \", \"arrowdown\"].includes(ev.key.toLocaleLowerCase() || ev.code)) {\n      setIsOpen(true);\n      highlightItem(0);\n    }\n  };\n  const highlightItem = optionIndex => {\n    setHighlightedIndex(optionIndex);\n  };\n  (0, _react.useEffect)(() => {\n    setOptionRefs(options.map(_ => (0, _react.createRef)()));\n  }, [options.length]);\n  (0, _react.useEffect)(() => {\n    setOverlayTop(labelRef.current?.offsetHeight || 0 + 10);\n  }, [labelRef.current?.offsetHeight]);\n  console.log(optionRefs);\n  (0, _react.useEffect)(() => {\n    if (highlightedIndex !== null && isOpen) {\n      const ref = optionRefs[highlightedIndex];\n      if (ref && ref.current) {\n        ref.current.focus();\n      }\n    }\n  }, [isOpen]);\n  return _react.default.createElement(\"div\", {\n    className: 'phaunoui-select'\n  }, _react.default.createElement(\"button\", {\n    onKeyDown: onButtonKeyDown,\n    ref: labelRef,\n    className: 'phaunoui-select__label',\n    onClick: onLabelClick\n  }, _react.default.createElement(_Text.default, null, selectedIndex >= 0 ? options[selectedIndex].label : label), _react.default.createElement(\"svg\", {\n    width: \"1rem\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: \"1.5\",\n    stroke: \"currentColor\",\n    className: `phaunoui-select__icon ${isOpen ? 'phaunoui-select__icon--open' : 'phaunoui-select__icon--closed'}`\n  }, _react.default.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 8.25l-7.5 7.5-7.5-7.5\"\n  }))), isOpen ? _react.default.createElement(\"ul\", {\n    style: {\n      top: overlayTop\n    },\n    className: 'phaunoui-select__overlay'\n  }, options.map((option, optionIndex) => {\n    const isSelected = selectedIndex === optionIndex;\n    const isHighlighted = highlightedIndex == optionIndex;\n    const ref = optionRefs[optionIndex];\n    const renderOptionProps = {\n      option,\n      isSelected,\n      getOptionRecommendedProps: (overrideProps = {}) => {\n        return {\n          ref,\n          tabIndex: isHighlighted ? -1 : 0,\n          onMouseEnter: () => highlightItem(optionIndex),\n          onMouseLeave: () => highlightItem(null),\n          className: `phaunoui-select__option \n                                ${isSelected ? \"phaunoui-select__option--selected\" : \"\"}\n                                ${isHighlighted ? \"phaunoui-select__option--highlighted\" : \"\"}`,\n          key: option.value,\n          onClick: () => onOptionSelected(option, optionIndex),\n          ...overrideProps\n        };\n      }\n    };\n    if (renderOptions) {\n      return renderOptions(renderOptionProps);\n    }\n    return _react.default.createElement(\"li\", {\n      ...renderOptionProps.getOptionRecommendedProps()\n    }, _react.default.createElement(_Text.default, null, option.label), isSelected ? _react.default.createElement(\"svg\", {\n      width: \"1rem\",\n      height: \"1rem\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 24 24\",\n      strokeWidth: \"1.5\",\n      stroke: \"currentColor\",\n      className: \"w-6 h-6\"\n    }, _react.default.createElement(\"path\", {\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      d: \"M4.5 12.75l6 6 9-13.5\"\n    })) : \"\");\n  })) : null);\n};\nexports.default = Select;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"3a0a1b7ec75a6ecba883051b43883144","cacheData":{"env":{}}}